<?php

/**
 * @file
 * Install, update, and uninstall functions for the Field SQL Storage module.
 */

use Drupal\field\Plugin\Core\Entity\Field;

/**
 * Writes field data directly to SQL storage.
 *
 * @ingroup update_api
 */
function _update_8000_field_sql_storage_write($entity_type, $bundle, $entity_id, $revision_id, $field_name, $data) {
  $table_name = "field_data_{$field_name}";
  $revision_name = "field_revision_{$field_name}";

  db_delete($table_name)
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute();
  db_delete($revision_name)
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->condition('revision_id', $revision_id)
    ->execute();

  $columns = array();
  foreach ($data as $langcode => $items) {
    foreach ($items as $delta => $item) {
      $record = array(
        'entity_type' => $entity_type,
        'entity_id' => $entity_id,
        'revision_id' => $revision_id,
        'bundle' => $bundle,
        'delta' => $delta,
        'langcode' => $langcode,
      );
      foreach ($item as $column => $value) {
        $record[_field_sql_storage_columnname($field_name, $column)] = $value;
      }

      $records[] = $record;
      // Record the columns used.
      $columns += $record;
    }
  }

  if ($columns) {
    $query = db_insert($table_name)->fields(array_keys($columns));
    $revision_query = db_insert($revision_name)->fields(array_keys($columns));
    foreach ($records as $record) {
      $query->values($record);
      if ($revision_id) {
        $revision_query->values($record);
      }
    }
    $query->execute();
    $revision_query->execute();
  }
}

/**
 * Implements hook_update_dependencies().
 */
function field_sql_storage_update_dependencies() {
  // Convert storage tables after field definitions have moved to
  // ConfigEntities.
  $dependencies['field_sql_storage'][8000] = array(
    'field' => 8003,
  );
  return $dependencies;
}

/**
 * Renames the 'language' column to 'langcode' in field data tables.
 */
function field_sql_storage_update_8000(&$sandbox) {
  // Get field definitions from config, and deleted fields from state system.
  $config_names = config_get_storage_names_with_prefix('field.field');
  $deleted_fields = Drupal::state()->get('field.field.deleted') ?: array();
  // Ditch UUID keys, we will iterate through deleted fields using a numeric
  // index.
  $deleted_fields = array_values($deleted_fields);

  if (empty($config_names) && empty($deleted_fields)) {
    return;
  }

  if (!isset($sandbox['index'])) {
    $sandbox['index'] = 0;
    $sandbox['max'] = count($config_names) + count($deleted_fields);
  }

  // Retrieve the next field definition. When the index exceeds the number of
  // 'configuration' fields, use it to iterate on deleted fields.
  if (isset($config_names[$sandbox['index']])) {
    $field_config = Drupal::config($config_names[$sandbox['index']])->get();
  }
  else {
    $field_config = $deleted_fields[$sandbox['index'] - count($config_names)];
  }

  if ($field_config['storage']['type'] == 'field_sql_storage') {
    $field = new Field($field_config);

    // Prepare updated schema data structures.
    $primary_key_data = array(
      'entity_type',
      'entity_id',
      'deleted',
      'delta',
      'langcode',
    );
    $primary_key_revision = array(
      'entity_type',
      'entity_id',
      'revision_id',
      'deleted',
      'delta',
      'langcode',
    );
    $langcode_index = array(
      'langcode',
    );
    $field_langcode = array(
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
      'default' => '',
    );

    $table_info = array(
      _field_sql_storage_tablename($field) => $primary_key_data,
      _field_sql_storage_revision_tablename($field) => $primary_key_revision,
    );
    foreach ($table_info as $table => $primary_key) {
      // Do not update tables which already have the langcode column,
      // created during the upgrade before this update function.
      if (db_field_exists($table, 'language')) {
        db_drop_primary_key($table);
        db_drop_index($table, 'language');
        db_change_field($table, 'language', 'langcode', $field_langcode);
        db_add_primary_key($table, $primary_key);
        db_add_index($table, 'langcode', $langcode_index);
      }
    }
  }

  $sandbox['index']++;
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['index'] / $sandbox['max']);
}
