<?php

/**
 * @file
 * Enables the use of personal and site-wide contact forms.
 */

use Drupal\contact\Plugin\Core\Entity\Category;
use Drupal\user\UserInterface;

/**
 * Implements hook_help().
 */
function contact_help($path, $arg) {
  switch ($path) {
    case 'admin/help#contact':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Contact module allows visitors to contact site administrators and other users. Users specify a subject, write their message, and can have a copy of their message sent to their own e-mail address. For more information, see the online handbook entry for <a href="@contact">Contact module</a>.', array('@contact' => 'http://drupal.org/documentation/modules/contact')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('User contact forms') . '</dt>';
      $output .= '<dd>' . t('Site users can be contacted with a user contact form that keeps their e-mail address private. Users may enable or disable their personal contact forms by editing their <em>My account</em> page. If enabled, a <em>Contact</em> tab leads to a personal contact form displayed on their user profile. Site administrators are still able to use the contact form, even if has been disabled. The <em>Contact</em> tab is not shown when you view your own profile.') . '</dd>';
      $output .= '<dt>' . t('Site-wide contact forms') . '</dt>';
      $output .= '<dd>' . t('The <a href="@contact">Contact page</a> provides a simple form for users with the <em>Use the site-wide contact form</em> permission to send comments, feedback, or other requests. You can create categories for directing the contact form messages to a set of defined recipients. Common categories for a business site, for example, might include "Website feedback" (messages are forwarded to website administrators) and "Product information" (messages are forwarded to members of the sales department). E-mail addresses defined within a category are not displayed publicly.', array('@contact' => url('contact'))) . '</p>';
      $output .= '<dt>' . t('Navigation') . '</dt>';
      $output .= '<dd>' . t('When the site-wide contact form is enabled, a link in the <em>Footer</em> menu is created, which you can modify on the <a href="@menu">Menus administration page</a>.', array('@menu' => url('admin/structure/menu'))) . '</dd>';
      $output .= '<dt>' . t('Customization') . '</dt>';
      $output .= '<dd>' . t('If you would like additional text to appear on the site-wide or personal contact page, use a block. You can create and edit blocks on the <a href="@blocks">Blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '</dl>';
      return $output;
    case 'admin/structure/contact':
      $output = '<p>' . t('Add one or more categories on this page to set up your site-wide <a href="@form">contact form</a>.', array('@form' => url('contact'))) . '</p>';
      $output .= '<p>' . t('A <em>Contact</em> menu item is added to the <em>Footer</em> menu, which you can modify on the <a href="@menu-settings">Menus administration page</a>.', array('@menu-settings' => url('admin/structure/menu'))) . '</p>';
      $output .= '<p>' . t('If you would like additional text to appear on the site-wide contact page, use a block. You can create and edit blocks on the <a href="@blocks">Blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function contact_permission() {
  return array(
    'administer contact forms' => array(
      'title' => t('Administer contact forms and contact form settings'),
    ),
    'access site-wide contact form' => array(
      'title' => t('Use the site-wide contact form'),
    ),
    'access user contact forms' => array(
      'title' => t("Use users' personal contact forms"),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function contact_menu() {
  $items['admin/structure/contact'] = array(
    'title' => 'Contact form categories',
    'description' => 'Create a system contact form and set up categories for the form to use.',
    'route_name' => 'contact_category_list',
  );
  $items['admin/structure/contact/add'] = array(
    'title' => 'Add category',
    'route_name' => 'contact_category_add',
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
  );
  $items['admin/structure/contact/manage/%contact_category'] = array(
    'title' => 'Edit contact category',
    'route_name' => 'contact_category_edit',
  );
  $items['admin/structure/contact/manage/%contact_category/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/contact/manage/%contact_category/delete'] = array(
    'title' => 'Delete',
    'route_name' => 'contact_category_delete',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['contact'] = array(
    'title' => 'Contact',
    'page callback' => 'contact_site_page',
    'access arguments' => array('access site-wide contact form'),
    'menu_name' => 'footer',
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'contact.pages.inc',
  );
  $items['contact/%contact_category'] = array(
    'title' => 'Contact category form',
    'title callback' => 'entity_page_label',
    'title arguments' => array(1),
    'page callback' => 'contact_site_page',
    'page arguments' => array(1),
    'access arguments' => array('access site-wide contact form'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'contact.pages.inc',
  );
  $items['user/%user/contact'] = array(
    'title' => 'Contact',
    'page callback' => 'contact_personal_page',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_contact_personal_tab_access',
    'access arguments' => array(1),
    'weight' => 2,
    'file' => 'contact.pages.inc',
  );
  return $items;
}

/**
 * Access callback: Checks access for a user's personal contact form.
 *
 * @param $account
 *   The user object of the user whose contact form is being requested.
 *
 * @see contact_menu()
 */
function _contact_personal_tab_access(UserInterface $account) {
  global $user;

  // Anonymous users cannot have contact forms.
  if ($account->isAnonymous()) {
    return FALSE;
  }

  // Users may not contact themselves.
  if ($user->id() == $account->id()) {
    return FALSE;
  }

  // User administrators should always have access to personal contact forms.
  if (user_access('administer users')) {
    return TRUE;
  }

  // If requested user has been blocked, do not allow users to contact them.
  if ($account->isBlocked()) {
    return FALSE;
  }

  // If the requested user has disabled their contact form, do not allow users
  // to contact them.
  $account_data = Drupal::service('user.data')->get('contact', $account->id(), 'enabled');
  if (isset($account_data) && empty($account_data)) {
    return FALSE;
  }
  // If the requested user did not save a preference yet, deny access if the
  // configured default is disabled.
  elseif (!Drupal::config('contact.settings')->get('user_default_enabled')) {
    return FALSE;
  }

  return user_access('access user contact forms');
}

/**
 * Implements hook_entity_bundle_info().
 */
function contact_entity_bundle_info() {
  $bundles = array();
  foreach (config_get_storage_names_with_prefix('contact.category.') as $config_name) {
    $config = Drupal::config($config_name);
    $bundles['contact_message'][$config->get('id')]['label'] = $config->get('label');
  }
  return $bundles;
}

/**
 * Implements hook_field_extra_fields().
 */
function contact_field_extra_fields() {
  $fields = array();
  foreach (array_keys(entity_get_bundles('contact_message')) as $bundle) {
    $fields['contact_message'][$bundle]['form']['name'] = array(
      'label' => t('Sender name'),
      'description' => t('Text'),
      'weight' => -50,
    );
    $fields['contact_message'][$bundle]['form']['mail'] = array(
      'label' => t('Sender e-mail'),
      'description' => t('E-mail'),
      'weight' => -40,
    );
    if ($bundle == 'personal') {
      $fields['contact_message'][$bundle]['form']['recipient'] = array(
        'label' => t('Recipient user name'),
        'description' => t('User'),
        'weight' => -30,
      );
    }
    $fields['contact_message'][$bundle]['form']['subject'] = array(
      'label' => t('Subject'),
      'description' => t('Text'),
      'weight' => -10,
    );
    $fields['contact_message'][$bundle]['form']['message'] = array(
      'label' => t('Message'),
      'description' => t('Long text'),
      'weight' => 0,
    );
    $fields['contact_message'][$bundle]['form']['copy'] = array(
      'label' => t('Send copy to sender'),
      'description' => t('Option'),
      'weight' => 50,
    );

    $fields['contact_message'][$bundle]['display']['message'] = array(
      'label' => t('Message'),
      'description' => t('The main contact message'),
      'weight' => 0,
    );
  }

  $fields['user']['user']['form']['contact'] = array(
    'label' => t('Contact settings'),
    'description' => t('Contact module form element.'),
    'weight' => 5,
  );
  return $fields;
}

/**
 * Loads a contact category.
 *
 * @param $id
 *   The ID of the contact category to load.
 *
 * @return \Drupal\contact\Plugin\Core\Entity\Category|null
 *   A Category object or NULL if the requested $id does not exist.
 */
function contact_category_load($id) {
  return entity_load('contact_category', $id);
}

/**
 * Entity URI callback.
 *
 * @param Drupal\contact\Plugin\Core\Entity\Category $category
 *   A contact category entity.
 *
 * @return array
 *   An array with 'path' as the key and the path to the category as the value.
 */
function contact_category_uri(Category $category) {
  return array(
    'path' => 'admin/structure/contact/manage/' . $category->id(),
  );
}

/**
 * Implements hook_mail().
 */
function contact_mail($key, &$message, $params) {
  $contact_message = $params['contact_message'];
  $sender = $params['sender'];
  $language = language_load($message['langcode']);

  $variables = array(
    '!site-name' => Drupal::config('system.site')->get('name'),
    '!subject' => $contact_message->getSubject(),
    '!category' => !empty($params['contact_category']) ? $params['contact_category']->label() : NULL,
    '!form-url' => url(current_path(), array('absolute' => TRUE, 'language' => $language)),
    '!sender-name' => user_format_name($sender),
  );
  if ($sender->isAuthenticated()) {
    $sender_uri = $sender->uri();
    $variables['!sender-url'] = url($sender_uri['path'], array('absolute' => TRUE, 'language' => $language) + $sender_uri['options']);
  }
  else {
    $variables['!sender-url'] = $params['sender']->getEmail();
  }

  $options = array('langcode' => $language->id);

  switch ($key) {
    case 'page_mail':
    case 'page_copy':
      $message['subject'] .= t('[!category] !subject', $variables, $options);
      $message['body'][] = t("!sender-name (!sender-url) sent a message using the contact form at !form-url.", $variables, $options);
      $build = entity_view($contact_message, 'mail', $language->id);
      $message['body'][] = drupal_render($build);
      break;

    case 'page_autoreply':
      $message['subject'] .= t('[!category] !subject', $variables, $options);
      $message['body'][] = $params['contact_category']->reply;
      break;

    case 'user_mail':
    case 'user_copy':
      $variables += array(
        '!recipient-name' => user_format_name($params['recipient']),
        '!recipient-edit-url' => url('user/' . $params['recipient']->id() . '/edit', array('absolute' => TRUE, 'language' => $language)),
      );
      $message['subject'] .= t('[!site-name] !subject', $variables, $options);
      $message['body'][] = t('Hello !recipient-name,', $variables, $options);
      $message['body'][] = t("!sender-name (!sender-url) has sent you a message via your contact form at !site-name.", $variables, $options);
      $message['body'][] = t("If you don't want to receive such e-mails, you can change your settings at !recipient-edit-url.", $variables, $options);
      $build = entity_view($contact_message, 'mail', $language->id);
      $message['body'][] = drupal_render($build);
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the enable personal contact form to an individual user's account page.
 *
 * @see \Drupal\user\ProfileFormController::form()
 */
function contact_form_user_form_alter(&$form, &$form_state) {
  $form['contact'] = array(
    '#type' => 'details',
    '#title' => t('Contact settings'),
    '#weight' => 5,
  );
  $account = $form_state['controller']->getEntity();
  $account_data = !user_is_anonymous() ? Drupal::service('user.data')->get('contact', $account->id(), 'enabled') : NULL;
  $form['contact']['contact'] = array(
    '#type' => 'checkbox',
    '#title' => t('Personal contact form'),
    '#default_value' => isset($account_data) ? $account_data : Drupal::config('contact.settings')->get('user_default_enabled'),
    '#description' => t('Allow other users to contact you via a personal contact form which keeps your e-mail address hidden. Note that some privileged users such as site administrators are still able to contact you even if you choose to disable this feature.'),
  );
  $form['actions']['submit']['#submit'][] = 'contact_user_profile_form_submit';
}

/**
 * Submit callback for the user profile form to save the contact page setting.
 */
function contact_user_profile_form_submit($form, &$form_state) {
  $account = $form_state['controller']->getEntity();
  if ($account->id() && isset($form_state['values']['contact'])) {
    Drupal::service('user.data')->set('contact', $account->id(), 'enabled', (int) $form_state['values']['contact']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the default personal contact setting on the user settings page.
 *
 * @see user_admin_settings()
 */
function contact_form_user_admin_settings_alter(&$form, &$form_state) {
  $form['contact'] = array(
    '#type' => 'details',
    '#title' => t('Contact settings'),
    '#weight' => 0,
  );
  $form['contact']['contact_default_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable the personal contact form by default for new users.'),
    '#description' => t('Changing this setting will not affect existing users.'),
    '#default_value' => Drupal::config('contact.settings')->get('user_default_enabled'),
  );
  // Add submit handler to save contact configuration.
  $form['#submit'][] = 'contact_form_user_admin_settings_submit';
}

/**
 * Form submission handler for user_admin_settings().
 *
 * @see contact_form_user_admin_settings_alter()
 */
function contact_form_user_admin_settings_submit($form, &$form_state) {
  Drupal::config('contact.settings')
    ->set('user_default_enabled', $form_state['values']['contact_default_status'])
    ->save();
}
