<?php

/**
 * @file
 * Allows the creaation of custom blocks through the user interface.
 */

use Drupal\custom_block\Plugin\Core\Entity\CustomBlockType;
use Drupal\custom_block\Plugin\Core\Entity\CustomBlock;

/**
 * Implements hook_help().
 */
function custom_block_help($path, $arg) {
  switch ($path) {
    case 'admin/help#custom_block':
      return t('Allows the creation of custom blocks through the user interface.');

    case 'admin/structure/custom-blocks':
      $output = '<p>' . t('This page lists user-created blocks. These blocks are derived from block types. A block type can consist of different fields and display settings. From the block types tab you can manage these fields as well as create new block types.') . '</p>';
      return $output;

    case 'admin/structure/custom-blocks/types':
      $output = '<p>' . t('This page lists block types. A block type can consist of different fields and display settings. From here you can manage these fields as well as create new block types.') . '</p>';
      return $output;

  }
}

/**
 * Implements hook_menu_local_tasks().
 */
function custom_block_menu_local_tasks(&$data, $router_item, $root_path) {
  if ($router_item['route_name'] == 'custom_block_list') {
    // @todo Move to a LocalAction plugin when https://drupal.org/node/2045267
    //   allows local actions to work with query strings.
    $item = menu_get_item('block/add');
    if ($item['access']) {
      // Add a destination parameter.
      $item['localized_options']['query']['destination'] = 'admin/structure/custom-blocks';
      $data['actions']['block/add'] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function custom_block_menu_local_actions_alter(&$actions) {
  if (isset($actions['local_action_static:custom_block_add_action'])) {
    foreach (list_themes() as $theme => $theme_info) {
      if ($theme_info->status) {
        $actions['local_action_static:custom_block_add_action']['appears_on'][] = "block_admin_display.$theme";
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function custom_block_menu() {
  $items['admin/structure/custom-blocks'] = array(
    'title' => 'Custom blocks',
    'description' => 'Manage custom blocks.',
    'route_name' => 'custom_block_list',
  );
  $items['admin/structure/custom-blocks/list'] = array(
    'title' => 'Blocks',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/custom-blocks/types'] = array(
    'title' => 'Types',
    'route_name' => 'custom_block_type_list',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/custom-blocks/types/add'] = array(
    'route_name' => 'custom_block_type_add',
    'type' => MENU_SIBLING_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/structure/custom-blocks/manage/%custom_block_type'] = array(
    'title' => 'Edit custom block type',
    'title callback' => 'entity_page_label',
    'title arguments' => array(4),
    'route_name' => 'custom_block_type_edit',
  );
  $items['admin/structure/custom-blocks/manage/%custom_block_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/custom-blocks/manage/%custom_block_type/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'route_name' => 'custom_block_type_delete',
  );
  $items['block/add'] = array(
    'title' => 'Add custom block',
    'route_name' => 'custom_block_add_page',
  );
  $items['block/add/%custom_block_type'] = array(
    'title' => 'Add custom block',
    'description' => 'Add custom block',
    'route_name' => 'custom_block_add_form'
  );
  // There has to be a base-item in order for contextual links to work.
  $items['block/%custom_block'] = array(
    'title' => 'Edit',
    'route_name' => 'custom_block_edit',
  );
  $items['block/%custom_block/edit'] = array(
    'title' => 'Edit',
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['block/%custom_block/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_block_delete_form', 1),
    'access callback' => 'entity_page_access',
    'access arguments' => array(1, 'delete'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'custom_block.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function custom_block_theme($existing, $type, $theme, $path) {
  return array(
    'custom_block_add_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'custom_block.pages.inc',
      'template' => 'custom-block-add-list',
    ),
  );
}

/**
 * Loads a custom block type.
 *
 * @param int $id
 *   The ID of the custom block type to load.
 *
 * @return \Drupal\custom_block\Plugin\Core\Entity\CustomBlockType|null
 *   A CustomBlockType object or NULL if the requested $id does not exist.
 */
function custom_block_type_load($id) {
  return entity_load('custom_block_type', $id);
}

/**
 * Loads a custom block.
 *
 * @param int $id
 *   The id of the custom block.
 *
 * @return \Drupal\custom_block\Plugin\Core\Entity\CustomBlock|null
 *   A CustomBlock object or NULL if the requested $id does not exist.
 */
function custom_block_load($id) {
  return entity_load('custom_block', $id);
}

/**
 * Implements hook_entity_info_alter().
 */
function custom_block_entity_info_alter(&$types) {
  // Add a translation handler for fields if the language module is enabled.
  if (module_exists('language')) {
    $types['custom_block']['translation']['custom_block'] = TRUE;
  }
}

/**
 * Implements hook_entity_bundle_info().
 */
function custom_block_entity_bundle_info() {
  $bundles = array();
  foreach (config_get_storage_names_with_prefix('custom_block.type.') as $config_name) {
    $config = Drupal::config($config_name);
    $bundles['custom_block'][$config->get('id')]['label'] = $config->get('label');
  }
  return $bundles;
}

/**
 * Adds the default body field to a custom block type.
 *
 * @param string $block_type_id
 *   Id of the block type.
 * @param string $label
 *   (optional) The label for the body instance. Defaults to 'Block body'
 *
 * @return array()
 *   Body field instance.
 */
function custom_block_add_body_field($block_type_id, $label = 'Block body') {
  // Add or remove the body field, as needed.
  $field = field_info_field('block_body');
  $instance = field_info_instance('custom_block', 'block_body', $block_type_id);
  if (empty($field)) {
    $field = entity_create('field_entity', array(
      'field_name' => 'block_body',
      'type' => 'text_with_summary',
      'entity_types' => array('custom_block'),
    ));
    $field->save();
  }
  if (empty($instance)) {
    $instance = entity_create('field_instance', array(
      'field_name' => 'block_body',
      'entity_type' => 'custom_block',
      'bundle' => $block_type_id,
      'label' => $label,
      'settings' => array('display_summary' => FALSE),
    ));
    $instance->save();

    // Assign widget settings for the 'default' form mode.
    entity_get_form_display('custom_block', $block_type_id, 'default')
      ->setComponent('block_body', array(
        'type' => 'text_textarea_with_summary',
      ))
      ->save();

    // Assign display settings for 'default' view mode.
    entity_get_display('custom_block', $block_type_id, 'default')
      ->setComponent('block_body', array(
        'label' => 'hidden',
        'type' => 'text_default',
      ))
      ->save();
  }

  return $instance;
}

/**
 * Implements hook_admin_paths().
 */
function custom_block_admin_paths() {
  $paths = array(
    'block/add' => TRUE,
    'block/add/*' => TRUE,
    'block/*' => TRUE,
    'block/*/delete' => TRUE,
    'admin/structure/custom-blocks/*' => TRUE,
  );
  return $paths;
}
